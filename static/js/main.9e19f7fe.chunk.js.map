{"version":3,"sources":["components/API.js","components/Header.js","components/EmployeeTable.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Header","Container","fluid","Row","className","Col","EmployeeTable","props","Table","bordered","onClick","onSortChange","icon","faArrowsAltV","employees","map","employee","index","key","src","picture","thumbnail","alt","name","first","last","email","cell","SearchBar","sm","md","span","offset","Form","Control","id","type","placeholder","value","onChange","handleInputChange","Button","variant","handleFormSubmit","App","updateSearch","event","setState","search","target","renderSearchList","state","filteredEmployees","searched","charAt","toUpperCase","slice","filter","indexOf","order","direction","sort","a","b","preventDefault","console","log","API","then","response","newArray","i","data","results","length","push","this","updateEmployeeList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e19f7fe.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n\r\nexport default {\r\n    search: function() {\r\n      return axios.get('https://randomuser.me/api/?results=10');\r\n    }\r\n  };","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport '../App.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <Container fluid>\r\n            <Row className=\"header\">\r\n                <Col><h2>Employee Directory</h2></Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nimport { faArrowsAltV } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n\r\nconst EmployeeTable = (props) => {\r\n\r\n\r\n\r\n    const renderEmployees = (employee, index) => {\r\n        return (\r\n            <tr key={index}>\r\n                <td><img src={employee.picture.thumbnail} alt='employee thumbnail'/></td>\r\n                <td>{employee.name.first} {employee.name.last}</td>\r\n                <td>{employee.email}</td>\r\n                <td>{employee.cell}</td>\r\n            </tr>\r\n        )\r\n    }\r\n    return (\r\n        \r\n        <Container>\r\n            <Table bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th></th>\r\n                        <th>Name<button className=\"button\" onClick={() => props.onSortChange()}><FontAwesomeIcon icon={faArrowsAltV} /></button></th>\r\n                        <th>Email Address</th>\r\n                        <th>Phone Number</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {props.employees.map(renderEmployees)}\r\n                </tbody>\r\n            </Table>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nexport default EmployeeTable;\r\n","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport '../App.css';\r\n\r\nconst SearchBar = (props) => {\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col sm={2}></Col>\r\n                <Col md={{ span: 6, offset: 2 }}><Form>\r\n                    <Form.Control id=\"inline\" type=\"text\" className=\"form-control\"\r\n                        placeholder=\"Search\" value={props.value} onChange={props.handleInputChange} />\r\n                    <Button id=\"inline-button\" variant=\"primary\" onClick={props.handleFormSubmit}>Search</Button>{' '}\r\n                </Form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\nexport default SearchBar;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\n// import axios from \"axios\";\nimport API from './components/API';\n\nimport Header from './components/Header';\nimport EmployeeTable from './components/EmployeeTable';\nimport SearchBar from './components/SearchBar';\n\nimport './App.css';\n\n\nclass App extends React.Component {\nconstructor(props) {\n  super(props)\n  this.state = {\n    search: '',\n    filteredEmployees: [],\n    employees: [],\n    sort: 'asc'\n  }\n}\n\n  componentDidMount() {\n    API.search()\n    .then( (response) => {\n      console.log(response);\n      let newArray = [];\n      for (let i = 0; i < response.data.results.length; i++) {\n        newArray.push(response.data.results[i])\n      }\n      console.log(newArray);\n      this.setState({ filteredEmployees: newArray, employees: newArray });\n    });\n\n  };\n\n  updateSearch = (event) => {\n    this.setState({ search: event.target.value });\n    this.renderSearchList();\n  }\n\n  renderSearchList = () => {\n    const { search } = this.state\n    if(search === \"\") {\n      return this.setState({filteredEmployees: this.state.employees})\n    }\n    let searched = search.charAt(0).toUpperCase() + search.slice(1);\n    let employees = this.state.filteredEmployees.filter((employee) => {\n      return employee.name.first.indexOf(searched) >= 0;\n    })\n\n\n    this.setState({ filteredEmployees: employees })\n\n\n  }\n\n  onSortChange = () => {\n    var order = this.state.direction === 'asc' ? 'desc' : 'asc';\n\n\n    this.setState({\n        filteredEmployees: [...this.state.filteredEmployees].sort( (a,b) =>{ \n         if(a.name.first < b.name.first) {\n           return order === 'asc' ? -1 : 1;\n         }\n         if (a.name.first > b.name.first) {\n          return order === 'asc' ? 1 : -1;\n         }\n         return 0;\n        }),\n        direction: order          \n    })\n\t};\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    console.log(this.state.search)\n    this.renderSearchList();\n  }\n\n\n  render() {\n\n    return (\n      \n      <Container fluid={false}>\n        <Header />\n        <SearchBar value={this.state.search}\n          handleInputChange={this.updateSearch}\n          handleFormSubmit={this.handleFormSubmit}\n        />\n        <EmployeeTable employees={this.state.filteredEmployees}\n          updateEmployeeList={this.updateSearch}\n          onSortChange={this.onSortChange}\n        />\n      </Container>\n\n    );\n  };\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}